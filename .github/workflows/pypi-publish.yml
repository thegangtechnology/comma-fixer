name: Publish package to PyPi

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.13'
  PACKAGE_NAME: 'comma-fixer'
  POETRY_VERSION: '2.1.3'

jobs:
  check-runner:
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.set-runner.outputs.runner-label }}
    steps:
      - name: Set runner
        id: set-runner
        run: |
          runners=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.RUNNER_READER_TOKEN }}" "https://api.github.com/orgs/thegangtechnology/actions/runners")
          available=$(echo "$runners" | jq '.runners[] | select(.status == "online" )')
          echo $available
          if [ -n "$available" ]; then
            echo "runner-label=self-hosted"
            echo "runner-label=self-hosted" >> $GITHUB_OUTPUT
          else
            echo "runner-label=ubuntu-latest"
            echo "runner-label=ubuntu-latest" >> $GITHUB_OUTPUT
          fi

  build:
    needs: [ check-runner ]
    runs-on: ${{ needs.check-runner.outputs.runner-label }}
    timeout-minutes: 20
    steps:
      # clone repository
      - uses: actions/checkout@v4
      # setup python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      # setup poetry (package manager)
      - name: Install poetry ${{ env.POETRY_VERSION }}
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry config installer.max-workers 10 --local
      # install package and dependencies
      - name: Install dependencies
        run: |
          poetry install
      # Build package
      - name: Build a binary wheel and a source tarball
        run: poetry run python3 -m build
      # Save built package as artifact
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    needs: [ check-runner, build ]
#    if:  ${{ needs.get-env.outputs.TEST_PUBLISH  == 'false'}}
    runs-on: ${{ needs.check-runner.outputs.runner-label }}
    environment:
      name: pypi
      url: https://pypi.org/p/${{ env.PACKAGE_NAME }}
    permissions:
      id-token: write
    steps:
      # Download built package
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      # Publish package to pypi
      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
